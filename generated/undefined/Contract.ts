// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewAuctionWinner extends ethereum.Event {
  get params(): NewAuctionWinner__Params {
    return new NewAuctionWinner__Params(this);
  }
}

export class NewAuctionWinner__Params {
  _event: NewAuctionWinner;

  constructor(event: NewAuctionWinner) {
    this._event = event;
  }

  get bidderID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewBid extends ethereum.Event {
  get params(): NewBid__Params {
    return new NewBid__Params(this);
  }
}

export class NewBid__Params {
  _event: NewBid;

  constructor(event: NewBid) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bidderID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewGoldenTicketWinner extends ethereum.Event {
  get params(): NewGoldenTicketWinner__Params {
    return new NewGoldenTicketWinner__Params(this);
  }
}

export class NewGoldenTicketWinner__Params {
  _event: NewGoldenTicketWinner;

  constructor(event: NewGoldenTicketWinner) {
    this._event = event;
  }

  get bidderID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewRaffleWinner extends ethereum.Event {
  get params(): NewRaffleWinner__Params {
    return new NewRaffleWinner__Params(this);
  }
}

export class NewRaffleWinner__Params {
  _event: NewRaffleWinner;

  constructor(event: NewRaffleWinner) {
    this._event = event;
  }

  get bidderID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract__getBidResultValue0Struct extends ethereum.Tuple {
  get bidderID(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get winType(): i32 {
    return this[2].toI32();
  }

  get claimed(): boolean {
    return this[3].toBoolean();
  }
}

export class Contract__getBidByIDResultValue0Struct extends ethereum.Tuple {
  get bidderID(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get winType(): i32 {
    return this[2].toI32();
  }

  get claimed(): boolean {
    return this[3].toBoolean();
  }
}

export class Contract__getBidWithAddressResultValue0Struct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bid(): Contract__getBidWithAddressResultValue0BidStruct {
    return changetype<Contract__getBidWithAddressResultValue0BidStruct>(
      this[1].toTuple()
    );
  }
}

export class Contract__getBidWithAddressResultValue0BidStruct extends ethereum.Tuple {
  get bidderID(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get winType(): i32 {
    return this[2].toI32();
  }

  get claimed(): boolean {
    return this[3].toBoolean();
  }
}

export class Contract__getBidsWithAddressesResultValue0Struct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bid(): Contract__getBidsWithAddressesResultValue0BidStruct {
    return changetype<Contract__getBidsWithAddressesResultValue0BidStruct>(
      this[1].toTuple()
    );
  }
}

export class Contract__getBidsWithAddressesResultValue0BidStruct extends ethereum.Tuple {
  get bidderID(): BigInt {
    return this[0].toBigInt();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get winType(): i32 {
    return this[2].toI32();
  }

  get claimed(): boolean {
    return this[3].toBoolean();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  auctionWinnersCount(): BigInt {
    let result = super.call(
      "auctionWinnersCount",
      "auctionWinnersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionWinnersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionWinnersCount",
      "auctionWinnersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  biddingEndTime(): BigInt {
    let result = super.call("biddingEndTime", "biddingEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_biddingEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "biddingEndTime",
      "biddingEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  biddingStartTime(): BigInt {
    let result = super.call(
      "biddingStartTime",
      "biddingStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_biddingStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "biddingStartTime",
      "biddingStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimingEndTime(): BigInt {
    let result = super.call(
      "claimingEndTime",
      "claimingEndTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_claimingEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimingEndTime",
      "claimingEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuctionWinners(): Array<BigInt> {
    let result = super.call(
      "getAuctionWinners",
      "getAuctionWinners():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getAuctionWinners(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAuctionWinners",
      "getAuctionWinners():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBid(bidder: Address): Contract__getBidResultValue0Struct {
    let result = super.call(
      "getBid",
      "getBid(address):((uint256,uint256,uint8,bool))",
      [ethereum.Value.fromAddress(bidder)]
    );

    return changetype<Contract__getBidResultValue0Struct>(result[0].toTuple());
  }

  try_getBid(
    bidder: Address
  ): ethereum.CallResult<Contract__getBidResultValue0Struct> {
    let result = super.tryCall(
      "getBid",
      "getBid(address):((uint256,uint256,uint8,bool))",
      [ethereum.Value.fromAddress(bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getBidResultValue0Struct>(value[0].toTuple())
    );
  }

  getBidByID(bidderID: BigInt): Contract__getBidByIDResultValue0Struct {
    let result = super.call(
      "getBidByID",
      "getBidByID(uint256):((uint256,uint256,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(bidderID)]
    );

    return changetype<Contract__getBidByIDResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBidByID(
    bidderID: BigInt
  ): ethereum.CallResult<Contract__getBidByIDResultValue0Struct> {
    let result = super.tryCall(
      "getBidByID",
      "getBidByID(uint256):((uint256,uint256,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(bidderID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getBidByIDResultValue0Struct>(value[0].toTuple())
    );
  }

  getBidWithAddress(
    bidderID: BigInt
  ): Contract__getBidWithAddressResultValue0Struct {
    let result = super.call(
      "getBidWithAddress",
      "getBidWithAddress(uint256):((address,(uint256,uint256,uint8,bool)))",
      [ethereum.Value.fromUnsignedBigInt(bidderID)]
    );

    return changetype<Contract__getBidWithAddressResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getBidWithAddress(
    bidderID: BigInt
  ): ethereum.CallResult<Contract__getBidWithAddressResultValue0Struct> {
    let result = super.tryCall(
      "getBidWithAddress",
      "getBidWithAddress(uint256):((address,(uint256,uint256,uint8,bool)))",
      [ethereum.Value.fromUnsignedBigInt(bidderID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getBidWithAddressResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getBidderAddress(bidderID: BigInt): Address {
    let result = super.call(
      "getBidderAddress",
      "getBidderAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(bidderID)]
    );

    return result[0].toAddress();
  }

  try_getBidderAddress(bidderID: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBidderAddress",
      "getBidderAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(bidderID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBiddersCount(): BigInt {
    let result = super.call(
      "getBiddersCount",
      "getBiddersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBiddersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBiddersCount",
      "getBiddersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBidsWithAddresses(): Array<
    Contract__getBidsWithAddressesResultValue0Struct
  > {
    let result = super.call(
      "getBidsWithAddresses",
      "getBidsWithAddresses():((address,(uint256,uint256,uint8,bool))[])",
      []
    );

    return result[0].toTupleArray<
      Contract__getBidsWithAddressesResultValue0Struct
    >();
  }

  try_getBidsWithAddresses(): ethereum.CallResult<
    Array<Contract__getBidsWithAddressesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getBidsWithAddresses",
      "getBidsWithAddresses():((address,(uint256,uint256,uint8,bool))[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getBidsWithAddressesResultValue0Struct>()
    );
  }

  getRaffleParticipants(): Array<BigInt> {
    let result = super.call(
      "getRaffleParticipants",
      "getRaffleParticipants():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getRaffleParticipants(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRaffleParticipants",
      "getRaffleParticipants():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRaffleWinners(): Array<BigInt> {
    let result = super.call(
      "getRaffleWinners",
      "getRaffleWinners():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getRaffleWinners(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRaffleWinners",
      "getRaffleWinners():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getState(): i32 {
    let result = super.call("getState", "getState():(uint8)", []);

    return result[0].toI32();
  }

  try_getState(): ethereum.CallResult<i32> {
    let result = super.tryCall("getState", "getState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  minBidIncrement(): BigInt {
    let result = super.call(
      "minBidIncrement",
      "minBidIncrement():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBidIncrement(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBidIncrement",
      "minBidIncrement():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  raffleWinnersCount(): BigInt {
    let result = super.call(
      "raffleWinnersCount",
      "raffleWinnersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_raffleWinnersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "raffleWinnersCount",
      "raffleWinnersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservePrice(): BigInt {
    let result = super.call("reservePrice", "reservePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reservePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reservePrice", "reservePrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get biddingStartTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get biddingEndTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claimingEndTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get auctionWinnersCount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get raffleWinnersCount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get minBidIncrement(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get bidderID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }

  get bidsCount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimProceedsCall extends ethereum.Call {
  get inputs(): ClaimProceedsCall__Inputs {
    return new ClaimProceedsCall__Inputs(this);
  }

  get outputs(): ClaimProceedsCall__Outputs {
    return new ClaimProceedsCall__Outputs(this);
  }
}

export class ClaimProceedsCall__Inputs {
  _call: ClaimProceedsCall;

  constructor(call: ClaimProceedsCall) {
    this._call = call;
  }
}

export class ClaimProceedsCall__Outputs {
  _call: ClaimProceedsCall;

  constructor(call: ClaimProceedsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueTokensCall extends ethereum.Call {
  get inputs(): RescueTokensCall__Inputs {
    return new RescueTokensCall__Inputs(this);
  }

  get outputs(): RescueTokensCall__Outputs {
    return new RescueTokensCall__Outputs(this);
  }
}

export class RescueTokensCall__Inputs {
  _call: RescueTokensCall;

  constructor(call: RescueTokensCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RescueTokensCall__Outputs {
  _call: RescueTokensCall;

  constructor(call: RescueTokensCall) {
    this._call = call;
  }
}

export class SettleAuctionCall extends ethereum.Call {
  get inputs(): SettleAuctionCall__Inputs {
    return new SettleAuctionCall__Inputs(this);
  }

  get outputs(): SettleAuctionCall__Outputs {
    return new SettleAuctionCall__Outputs(this);
  }
}

export class SettleAuctionCall__Inputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }
}

export class SettleAuctionCall__Outputs {
  _call: SettleAuctionCall;

  constructor(call: SettleAuctionCall) {
    this._call = call;
  }
}

export class SettleRaffleCall extends ethereum.Call {
  get inputs(): SettleRaffleCall__Inputs {
    return new SettleRaffleCall__Inputs(this);
  }

  get outputs(): SettleRaffleCall__Outputs {
    return new SettleRaffleCall__Outputs(this);
  }
}

export class SettleRaffleCall__Inputs {
  _call: SettleRaffleCall;

  constructor(call: SettleRaffleCall) {
    this._call = call;
  }

  get randomNumbers(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SettleRaffleCall__Outputs {
  _call: SettleRaffleCall;

  constructor(call: SettleRaffleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawUnclaimedFundsCall extends ethereum.Call {
  get inputs(): WithdrawUnclaimedFundsCall__Inputs {
    return new WithdrawUnclaimedFundsCall__Inputs(this);
  }

  get outputs(): WithdrawUnclaimedFundsCall__Outputs {
    return new WithdrawUnclaimedFundsCall__Outputs(this);
  }
}

export class WithdrawUnclaimedFundsCall__Inputs {
  _call: WithdrawUnclaimedFundsCall;

  constructor(call: WithdrawUnclaimedFundsCall) {
    this._call = call;
  }
}

export class WithdrawUnclaimedFundsCall__Outputs {
  _call: WithdrawUnclaimedFundsCall;

  constructor(call: WithdrawUnclaimedFundsCall) {
    this._call = call;
  }
}
